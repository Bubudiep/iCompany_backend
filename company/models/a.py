from django.db import models, IntegrityError
from django.utils import timezone
from django.utils.timezone import now
from django.contrib.auth.models import User
from datetime import time
from rest_framework import exceptions
import uuid
from django.db.models import Q,F
from decouple import config
from django.core.exceptions import ValidationError
from django.contrib.auth.hashers import make_password
import random
import string
from django.utils.timezone import now
from datetime import datetime, timedelta
from django.db.models import F
import socketio
from django.core.exceptions import ObjectDoesNotExist
import time as time_module
from collections import defaultdict
from django.db.models import Count
import base64
from PIL import Image
from io import BytesIO

# Kh·ªüi t·∫°o client
sio = socketio.Client()

# S·ª± ki·ªán khi k·∫øt n·ªëi th√†nh c√¥ng
@sio.event
def connect():
    print("‚úÖ ƒê√£ k·∫øt n·ªëi t·ªõi server")

# Nh·∫≠n ph·∫£n h·ªìi t·ª´ server
@sio.on('chat_response')
def on_chat_response(data):
    print("üì• Server tr·∫£ v·ªÅ:", data)

# Khi b·ªã ng·∫Øt k·∫øt n·ªëi
@sio.event
def disconnect():
    print("‚ùå M·∫•t k·∫øt n·ªëi")

# Ki·ªÉm tra k·∫øt n·ªëi tr∆∞·ªõc khi k·∫øt n·ªëi
def check_connection():
    try:
        print(f"K·∫øt n·ªëi t·ªõi {config('SOCKET')}")
        sio.connect(config('SOCKET'),
            headers={
                'applicationkey': config('SOCKET_KEY')
            })
        # Ch·ªù m·ªôt ch√∫t ƒë·ªÉ xem k·∫øt n·ªëi c√≥ th√†nh c√¥ng kh√¥ng
        time_module.sleep(2)  # Ch·ªù 2 gi√¢y

        if sio.connected:
            print("‚úÖ ƒê√£ k·∫øt n·ªëi t·ªõi server.")
            return True
        else:
            print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server.")
    except socketio.exceptions.ConnectionError as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
        return False

# K·∫øt n·ªëi l·∫°i n·∫øu k·∫øt n·ªëi th·∫•t b·∫°i
def connect_with_retry():
    while not check_connection():
        print("‚è≥ ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...")
        time_module.sleep(5)  # Ch·ªù 5 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i

# G·ªçi h√†m k·∫øt n·ªëi v·ªõi retry
connect_with_retry()

# Ti·∫øp t·ª•c v·ªõi c√°c thao t√°c ti·∫øp theo n·∫øu k·∫øt n·ªëi th√†nh c√¥ng
print("Ti·∫øn h√†nh c√°c thao t√°c ti·∫øp theo sau khi k·∫øt n·ªëi th√†nh c√¥ng.")

def resize_base64_image(base64_str, size=(20, 20)):
    try:
        if base64_str.startswith('data:image'):
            header, base64_data = base64_str.split(',', 1)
        else:
            header = 'data:image/png;base64'
            base64_data = base64_str
        image_data = base64.b64decode(base64_data)
        image = Image.open(BytesIO(image_data))
        image = image.convert("RGBA")
        image = image.resize(size, Image.Resampling.LANCZOS)
        buffer = BytesIO()
        image.save(buffer, format="PNG")
        resized_base64 = base64.b64encode(buffer.getvalue()).decode()
        return f"{header},{resized_base64}"
    except Exception as e:
        print(f"{e}")
        return None  # fallback n·∫øu l·ªói