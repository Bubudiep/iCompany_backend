from django.db.models.signals import post_save, pre_save, post_migrate
from django.dispatch import receiver
from .models import *
from .serializers import *
import threading

_thread_locals = threading.local()
@receiver(post_save, sender=ChatMessage)
def handle_transaction_save(sender, instance, created, **kwargs):
    if created:
        # C·∫≠p nh·∫≠t th·ªùi gian cu·ªëi c√≥ tin nh·∫Øn cho ph√≤ng chat
        instance.room.last_have_message_at = now()
        instance.room.save(update_fields=['last_have_message_at'])
        # C·∫≠p nh·∫≠t ho·∫∑c t·∫°o m·ªõi b·∫£n ghi ChatDate
        chat_date,_ = ChatDate.objects.get_or_create(room=instance.room, date=now().date())
        chat_date.total_messages = F('total_messages') + 1
        chat_date.save(update_fields=['total_messages'])
        if instance.socket_sended==False:
            instance.socket_sended=True
            instance.save(update_fields=['socket_sended'])
            sio.emit('backend_event', {
                'type': 'chat_message',
                'room': AppChatRoomSerializer(instance.room).data,
                'data':  ChatMessageSerializer(instance).data,
                'key': instance.room.company.key
            })
    
@receiver(pre_save, sender=CompanyOperator)
def store_old_operator_data(sender, instance, **kwargs):
    if instance.pk:  # Ch·ªâ l∆∞u khi ƒë√£ c√≥ trong DB
        try:
            old_instance = CompanyOperator.objects.get(pk=instance.pk)
            _thread_locals.old_operator_data = CompanyOperatorSerializer(old_instance).data
        except CompanyOperator.DoesNotExist:
            _thread_locals.old_operator_data = None
    else:
        _thread_locals.old_operator_data = None

# IGNORED_FIELDS = ["updated_at"]
# @receiver(post_save, sender=CompanyOperator)
# def handle_transaction_save(sender, instance, created, **kwargs):
#     current_data = CompanyOperatorSerializer(instance).data
#     old_data = getattr(_thread_locals, "old_operator_data", None)
#     qs_staff = CompanyStaff.objects.get(user__user=user,company=instance.company)
#     # N·∫øu l√† t·∫°o m·ªõi th√¨ l∆∞u to√†n b·ªô
#     if created or not old_data:
#         OperatorUpdateHistory.objects.create(
#             operator=instance,
#             old_data=None,
#             new_data=current_data,
#             notes="Kh·ªüi t·∫°o t√†i kho·∫£n"
#         )
#     else:
#         # So s√°nh t·ª´ng tr∆∞·ªùng v√† ch·ªâ l·∫•y c√°c tr∆∞·ªùng thay ƒë·ªïi
#         changed_data = {
#             key: current_data[key]
#             for key in current_data
#             if key not in IGNORED_FIELDS and old_data.get(key) != current_data.get(key)
#         }
#         if changed_data:  # Ch·ªâ t·∫°o l·ªãch s·ª≠ n·∫øu c√≥ s·ª± thay ƒë·ªïi
#             OperatorUpdateHistory.objects.create(
#                 operator=instance,
#                 old_data={k: old_data[k] for k in changed_data if k in old_data},
#                 new_data=changed_data,
#                 notes="C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n"
#             )
#     _thread_locals.old_operator_data = None

@receiver(post_save, sender=Company)
def handle_transaction_save(sender, instance, created, **kwargs):
    if created:
        company = instance
        print(f"ƒê√£ t·∫°o c√¥ng ty: {company.name}")
        if not User.objects.filter(username=f"{company.key}_admin").exists():
            user = User.objects.create(username=f"{company.key}_admin", password=make_password(uuid.uuid4().hex.upper()))
            staff = CompanyUser.objects.create(user=user, company=company, username="admin", password="1234")  # C√≥ th·ªÉ m√£ h√≥a password sau
            cstaff = CompanyStaff.objects.create(company=company, user=staff,cardID="Admin", isActive=True, isSuperAdmin=True, isAdmin=True)
            print(f"T√†i kho·∫£n admin cho c√¥ng ty {company.name} ƒë√£ ƒë∆∞·ª£c t·∫°o.")
        else:
            print(f"T√†i kho·∫£n admin cho c√¥ng ty {company.name} ƒë√£ t·ªìn t·∫°i.")
    else:
        print(f"C√¥ng ty {instance.name} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.")

@receiver(post_save, sender=CompanyStaff)
def handle_transaction_save(sender, instance, created, **kwargs):
    staff = instance
    if created:
        # T·∫°o profile
        sio.emit('backend_event', {
            'type': 'user_created',
            'data':  CompanyStaffDetailsSerializer(instance).data,
            'key': instance.company.key
        })
        print(f"ƒê√£ t·∫°o nh√¢n vi√™n: {staff.cardID}")
    else:
        print(f"{staff.cardID} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.")
        
# Kh·ªüi t·∫°o ban ƒë·∫ßu
@receiver(post_migrate)
def create_default_miniapps(sender, **kwargs):
    print("üöÄ Signal ch·∫°y: t·∫°o miniapps m·∫∑c ƒë·ªãnh...")
    if sender.name != 'company':  # thay b·∫±ng t√™n app c·ªßa b·∫°n
        return
    default_apps = [
        {
            "appID": "app_chat",
            "name": "Chat",
            "description": "·ª®ng d·ª•ng chat gi·ªØa ng∆∞·ªùi d√πng",
            "isActive": True,
            "public": True,
            "functions": [
                {"code": "chat_send","public": True, "name": "G·ª≠i tin nh·∫Øn"},
                {"code": "chat_history","public": True, "name": "Xem l·ªãch s·ª≠"},
                {"code": "chat_group","public": True, "name": "T·∫°o nh√≥m chat"},
                {"code": "chat_setting","public": True, "name": "C√†i ƒë·∫∑t chat"},
            ]
        },
        {
            "appID": "app_booking",
            "name": "ƒê·∫∑t l·ªãch",
            "description": "ƒê·∫∑t l·ªãch h·∫πn",
            "isActive": True,
            "public": True,
            "functions": [
                {"code": "booking_create", "public": True, "name": "T·∫°o l·ªãch h·∫πn"},
                {"code": "booking_cancel", "public": True, "name": "H·ªßy l·ªãch"},
                {"code": "booking_reminder", "public": True, "name": "Nh·∫Øc nh·ªü"},
            ]
        },
        {
            "appID": "app_dashboard",
            "name": "T·ªïng quan",
            "description": "T·ªïng quan",
            "public": True,
            "isActive": True,
            "functions": [
                {"code": "dashboard_view", "public": True, "name": "Xem b√°o c√°o"},
            ]
        },
        {
            "appID": "app_staff",
            "name": "Nh√¢n vi√™n",
            "public": True,
            "description": "Qu·∫£n l√Ω danh s√°ch nh√¢n vi√™n v√† ph√≤ng ban, s∆° ƒë·ªì t·ªï ch·ª©c",
            "isActive": True,
            "functions": [
                {"code": "staff_list", "public": True, "name": "Danh s√°ch nh√¢n vi√™n"},
                {"code": "staff_department", "public": True, "name": "Qu·∫£n l√Ω ph√≤ng ban"},
                {"code": "staff_chart", "public": True, "name": "S∆° ƒë·ªì t·ªï ch·ª©c"},
            ]
        },
        {
            "appID": "app_setting",
            "name": "C√†i ƒë·∫∑t",
            "description": "C·∫•u h√¨nh c√¥ng ty",
            "isActive": True,
            "public": True,
            "functions": [
                {"code": "setting_company", "public": True, "name": "Th√¥ng tin c√¥ng ty"},
                {"code": "setting_permissions", "public": True, "name": "Ph√¢n quy·ªÅn"},
            ]
        },
        {
            "appID": "app_ticketapproval",
            "name": "Ph√™ duy·ªát",
            "public": True,
            "description": "Ph√™ duy·ªát h·∫°ng m·ª•c",
            "isActive": True,
            "functions": [
                {"code": "approval_ticket", "public": True, "name": "Ph√™ duy·ªát phi·∫øu"},
                {"code": "approval_history", "public": True, "name": "L·ªãch s·ª≠ ph√™ duy·ªát"},
            ]
        },
    ]

    for app_data in default_apps:
        app_obj, _ = MiniApp.objects.update_or_create(appID=app_data["appID"], defaults={
            "name": app_data["name"],
            "description": app_data["description"],
            "isActive": app_data["isActive"],
            "public": app_data["public"]
        })

        for func_data in app_data.get("functions", []):
            MiniAppFunction.objects.update_or_create(
                mini_app=app_obj,
                code=func_data["code"],
                defaults={
                    "name": func_data["name"],
                    "public": func_data["public"],
                    "description": func_data.get("description", "")
                }
            )
            