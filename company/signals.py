from django.db.models.signals import post_save, post_migrate
from django.dispatch import receiver
from .models import *
@receiver(post_save, sender=UserProfile)
def handle_transaction_save(sender, instance, created, **kwargs):
    if created:
        user = instance
        print(f"ƒê√£ t·∫°o user: {user.full_name}")
    else:
        print(f"User {instance.user.username} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.")


# Kh·ªüi t·∫°o ban ƒë·∫ßu
@receiver(post_migrate)
def create_default_miniapps(sender, **kwargs):
    print("üöÄ Signal ch·∫°y: t·∫°o miniapps m·∫∑c ƒë·ªãnh...")
    if sender.name != 'company':  # thay b·∫±ng t√™n app c·ªßa b·∫°n
        return
    default_apps = [
        {
            "appID": "app_chat",
            "name": "Chat",
            "description": "·ª®ng d·ª•ng chat gi·ªØa ng∆∞·ªùi d√πng",
            "isActive": True,
            "functions": [
                {"code": "chat_send", "name": "G·ª≠i tin nh·∫Øn"},
                {"code": "chat_history", "name": "Xem l·ªãch s·ª≠"},
                {"code": "chat_group", "name": "T·∫°o nh√≥m chat"},
                {"code": "chat_setting", "name": "C√†i ƒë·∫∑t chat"},
            ]
        },
        {
            "appID": "app_booking",
            "name": "ƒê·∫∑t l·ªãch",
            "description": "ƒê·∫∑t l·ªãch h·∫πn",
            "isActive": True,
            "functions": [
                {"code": "booking_create", "name": "T·∫°o l·ªãch h·∫πn"},
                {"code": "booking_cancel", "name": "H·ªßy l·ªãch"},
                {"code": "booking_reminder", "name": "Nh·∫Øc nh·ªü"},
            ]
        },
        {
            "appID": "app_dashboard",
            "name": "T·ªïng quan",
            "description": "T·ªïng quan",
            "isActive": True,
            "functions": [
                {"code": "dashboard_view", "name": "Xem b√°o c√°o"},
            ]
        },
        {
            "appID": "app_staff",
            "name": "Nh√¢n vi√™n",
            "description": "Qu·∫£n l√Ω danh s√°ch nh√¢n vi√™n v√† ph√≤ng ban, s∆° ƒë·ªì t·ªï ch·ª©c",
            "isActive": True,
            "functions": [
                {"code": "staff_list", "name": "Danh s√°ch nh√¢n vi√™n"},
                {"code": "staff_department", "name": "Qu·∫£n l√Ω ph√≤ng ban"},
                {"code": "staff_chart", "name": "S∆° ƒë·ªì t·ªï ch·ª©c"},
            ]
        },
        {
            "appID": "app_setting",
            "name": "C√†i ƒë·∫∑t",
            "description": "C·∫•u h√¨nh c√¥ng ty",
            "isActive": True,
            "functions": [
                {"code": "setting_company", "name": "Th√¥ng tin c√¥ng ty"},
                {"code": "setting_permissions", "name": "Ph√¢n quy·ªÅn"},
            ]
        },
        {
            "appID": "app_ticketapproval",
            "name": "Ph√™ duy·ªát",
            "description": "Ph√™ duy·ªát h·∫°ng m·ª•c",
            "isActive": True,
            "functions": [
                {"code": "approval_ticket", "name": "Ph√™ duy·ªát phi·∫øu"},
                {"code": "approval_history", "name": "L·ªãch s·ª≠ ph√™ duy·ªát"},
            ]
        },
    ]

    for app_data in default_apps:
        app_obj, _ = MiniApp.objects.get_or_create(appID=app_data["appID"], defaults={
            "name": app_data["name"],
            "description": app_data["description"],
            "isActive": app_data["isActive"]
        })

        for func_data in app_data.get("functions", []):
            MiniAppFunction.objects.get_or_create(
                mini_app=app_obj,
                code=func_data["code"],
                defaults={
                    "name": func_data["name"],
                    "description": func_data.get("description", "")
                }
            )